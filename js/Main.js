// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.App = (function() {
    var TitleView, canvas, images, socket, stage, tkr, totalLoaded, xSpeed, ySpeed;

    canvas = null;

    stage = null;

    images = null;

    xSpeed = 12;

    ySpeed = 12;

    totalLoaded = 0;

    tkr = new Object;

    TitleView = new Container();

    socket = null;

    function App() {
      this.update = __bind(this.update, this);

      this.alert = __bind(this.alert, this);

      this.reset = __bind(this.reset, this);

      this.movePaddle_2 = __bind(this.movePaddle_2, this);

      this.movePaddle_1 = __bind(this.movePaddle_1, this);

      this.startGame = __bind(this.startGame, this);

      this.addGameView = __bind(this.addGameView, this);

      this.tweenTitleView = __bind(this.tweenTitleView, this);

      this.addTitleView = __bind(this.addTitleView, this);

      this.handleLoadComplete = __bind(this.handleLoadComplete, this);

      this.handleFileLoad = __bind(this.handleFileLoad, this);

      this.Main = __bind(this.Main, this);
      this.TitleView = new Container();
      this.tkr = new Object;
      this.Main();
    }

    document.ontouchmove = function(e) {
      return e.preventDefault();
    };

    App.prototype.Main = function() {
      var preloader, user_num,
        _this = this;
      socket = io.connect("http://scott.local:8080");
      user_num = 0;
      socket.on("connect", function() {
        console.log('Connected, Frontend');
        socket.emit("adduser", prompt("What's your name?"));
        return socket.on("updateusers", function(data) {
          return $.each(data, function(key, value) {
            console.log('username: ' + key);
            $('#userDiv').append(key + ' has joined the game! <br/>').fadeOut(2000);
            user_num++;
            if (user_num < 2) {
              return console.log('Waiting for another player');
            } else {
              console.log('Ready to play!');
              return _this.tweenTitleView();
            }
          });
        });
      });
      this.canvas = document.getElementById('PongStage');
      this.stage = new Stage(this.canvas, true);
      this.images = [
        {
          src: "img/bg.png",
          id: "bg"
        }, {
          src: "img/main.png",
          id: "main"
        }, {
          src: "img/startB.png",
          id: "startB"
        }, {
          src: "img/paddle.png",
          id: "player_2"
        }, {
          src: "img/paddle.png",
          id: "player_1"
        }, {
          src: "img/ball.png",
          id: "ball"
        }, {
          src: "img/player_1_win.png",
          id: "win"
        }, {
          src: "img/player_2_win.png",
          id: "lose"
        }
      ];
      preloader = new PreloadJS();
      preloader.onFileLoad = this.handleFileLoad;
      preloader.loadManifest(this.images);
      Ticker.setFPS(30);
      return Ticker.addListener(this.stage);
    };

    App.prototype.handleFileLoad = function(e) {
      var img;
      switch (e.type) {
        case PreloadJS.IMAGE:
          img = new Image();
          img.src = e.src;
          img.onload = this.handleLoadComplete;
          window[e.id] = new Bitmap(img);
          return this.handleLoadComplete();
      }
    };

    App.prototype.handleLoadComplete = function() {
      totalLoaded++;
      if (this.images.length === totalLoaded) {
        return this.addTitleView();
      }
    };

    App.prototype.addTitleView = function() {
      startB.x = 240 - 31.5;
      startB.y = 180;
      startB.name = 'startB';
      this.TitleView.addChild(main, startB);
      this.stage.addChild(bg, this.TitleView);
      this.stage.update();
      return startB.onPress = this.tweenTitleView;
    };

    App.prototype.tweenTitleView = function() {
      return Tween.get(this.TitleView).to({
        y: -320
      }, 500).call(this.addGameView);
    };

    App.prototype.addGameView = function() {
      $('#userDiv').hide();
      $('#waitDiv').hide();
      this.stage.removeChild(this.TitleView);
      this.TitleView = null;
      player_1.x = 2;
      player_1.y = 160 - 37.5;
      player_2.x = 480 - 25;
      player_2.y = 160 - 37.5;
      ball.x = 240 - 15;
      ball.y = 160 - 15;
      this.player_1_score = new Text('0', 'bold 20px Arial', '#A3FF24');
      this.player_1_score.x = 211;
      this.player_1_score.y = 20;
      this.player_2_score = new Text('0', 'bold 20px Arial', '#A3FF24');
      this.player_2_score.x = 262;
      this.player_2_score.y = 20;
      this.stage.addChild(this.player_1_score, this.player_2_score, player_1, player_2, ball);
      this.stage.update();
      return bg.onPress = this.startGame;
    };

    App.prototype.startGame = function(e) {
      var isMouseDown, touchFunction,
        _this = this;
      bg.onPress = null;
      isMouseDown = false;
      socket.on("ballmove", function(x, y) {
        ball.x = x;
        ball.y = y;
        return console.log('ball X: ' + ball.x, 'ball Y: ' + ball.y);
      });
      document.addEventListener('touchmove', touchFunction = function(e) {
        var index, touch, _i, _len, _ref, _results;
        index = 0;
        _ref = e.touches;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          touch = _ref[_i];
          if (touch.pageX < $('#PongStage').width() / 2) {
            _this.movePaddle_1(touch);
          }
          if (touch.pageX > $('#PongStage').width() / 2) {
            _this.movePaddle_2(touch);
          }
          _results.push(index++);
        }
        return _results;
      });
      Ticker.addListener(tkr, false);
      tkr.tick = this.update;
      Tween.get(lose).to({
        y: -115
      }, 300);
      return Tween.get(win).to({
        y: -115
      }, 300);
    };

    App.prototype.movePaddle_1 = function(touch) {
      var _this = this;
      socket.emit("paddlemove_1", touch.pageY);
      return socket.on("move_player_1", function(pageY) {
        return player_1.y = pageY - 40;
      });
    };

    App.prototype.movePaddle_2 = function(touch) {
      var _this = this;
      socket.emit("paddlemove_2", touch.pageY);
      return socket.on("move_player_2", function(pageY) {
        return player_2.y = pageY - 40;
      });
    };

    App.prototype.reset = function() {
      ball.x = 240 - 15;
      ball.y = 160 - 15;
      player_1.y = 160 - 37.5;
      player_2.y = 160 - 37.5;
      Ticker.removeListener(tkr);
      return bg.onPress = this.startGame;
    };

    App.prototype.resetGame = function() {
      this.stage.removeChild(this.player_1_score, this.player_2_score);
      this.player_1_score = new Text('0', 'bold 20px Arial', '#A3FF24');
      this.player_1_score.x = 211;
      this.player_1_score.y = 20;
      this.player_2_score = new Text('0', 'bold 20px Arial', '#A3FF24');
      this.player_2_score.x = 262;
      this.player_2_score.y = 20;
      this.stage.addChild(this.player_1_score, this.player_2_score);
      this.stage.update();
      return bg.onPress = this.startGame;
    };

    App.prototype.alert = function(e) {
      Ticker.removeListener(tkr);
      this.stage.onMouseMove = null;
      bg.onPress = this.resetGame();
      if (e === 'win') {
        win.x = 140;
        win.y = -90;
        this.stage.addChild(win);
        return Tween.get(win).to({
          y: 115
        }, 300);
      } else {
        lose.x = 140;
        lose.y = -90;
        this.stage.addChild(lose);
        return Tween.get(lose).to({
          y: 115
        }, 300);
      }
    };

    App.prototype.update = function() {
      if (ball.x + 30 > 480) {
        xSpeed = -xSpeed;
        this.player_1_score.text = parseInt(this.player_1_score.text + 1);
        this.reset();
      }
      if (ball.x < 0) {
        xSpeed = -xSpeed;
        this.player_2_score.text = parseInt(this.player_2_score.text + 1);
        this.reset();
      }
      if (player_1.y >= 249) {
        player_1.y = 249;
      } else if (player_2.y >= 249) {
        player_2.y = 249;
      }
      if (this.player_1_score.text === 5) {
        this.alert('win');
      }
      if (this.player_2_score.text === 5) {
        return this.alert('lose');
      }
    };

    return App;

  })();

}).call(this);
