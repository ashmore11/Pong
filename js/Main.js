// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.App = (function() {
    var TitleView, canvas, images, socket, stage, totalLoaded;

    canvas = null;

    stage = null;

    images = null;

    totalLoaded = 0;

    TitleView = new Container();

    socket = null;

    function App() {
      this.resetGame = __bind(this.resetGame, this);

      this.playerTwoScore = __bind(this.playerTwoScore, this);

      this.playerOneScore = __bind(this.playerOneScore, this);

      this.movePaddle_2 = __bind(this.movePaddle_2, this);

      this.movePaddle_1 = __bind(this.movePaddle_1, this);

      this.startGame = __bind(this.startGame, this);

      this.addGameView = __bind(this.addGameView, this);

      this.tweenTitleView = __bind(this.tweenTitleView, this);

      this.addTitleView = __bind(this.addTitleView, this);

      this.handleLoadComplete = __bind(this.handleLoadComplete, this);

      this.handleFileLoad = __bind(this.handleFileLoad, this);

      this.Main = __bind(this.Main, this);
      this.TitleView = new Container();
      this.Main();
    }

    document.ontouchmove = function(e) {
      return e.preventDefault();
    };

    App.prototype.Main = function() {
      var preloader,
        _this = this;
      socket = io.connect("http://scott.local:8080");
      socket.on("connect", function() {
        socket.emit("adduser", prompt("What's your name?"));
        return socket.on("updateusers", function(data) {
          return $.each(data, function(key, value) {
            return $('#userDiv').append(key + ' has joined the game! <br/>').fadeOut(2000);
          });
        });
      });
      socket.on("user_num", function(user_num) {
        if (user_num < 2) {
          return console.log('waiting...');
        } else {
          console.log('user_num: ' + user_num);
          return _this.tweenTitleView();
        }
      });
      socket.on("player_1_score", function() {
        return _this.playerOneScore();
      });
      socket.on("player_2_score", function() {
        return _this.playerTwoScore();
      });
      this.canvas = document.getElementById('PongStage');
      this.stage = new Stage(this.canvas);
      this.images = [
        {
          src: "img/waiting.gif",
          id: "wait"
        }, {
          src: "img/main.png",
          id: "main"
        }, {
          src: "img/bg.png",
          id: "bg"
        }, {
          src: "img/paddle.png",
          id: "player_1"
        }, {
          src: "img/paddle.png",
          id: "player_2"
        }, {
          src: "img/ball.png",
          id: "ball"
        }, {
          src: "img/player_1_win.png",
          id: "win"
        }, {
          src: "img/player_2_win.png",
          id: "lose"
        }
      ];
      preloader = new PreloadJS();
      preloader.onFileLoad = this.handleFileLoad;
      preloader.loadManifest(this.images);
      return Ticker.addListener(this.stage);
    };

    App.prototype.handleFileLoad = function(e) {
      var img;
      switch (e.type) {
        case PreloadJS.IMAGE:
          img = new Image();
          img.src = e.src;
          img.onload = this.handleLoadComplete;
          window[e.id] = new Bitmap(img);
          return this.handleLoadComplete();
      }
    };

    App.prototype.handleLoadComplete = function() {
      totalLoaded++;
      if (this.images.length === totalLoaded) {
        return this.addTitleView();
      }
    };

    App.prototype.addTitleView = function() {
      wait.x = 100;
      wait.y = 180;
      Tween.get(wait).to({
        y: 130
      }, 500);
      this.TitleView.addChild(main, wait);
      return this.stage.addChild(bg, this.TitleView);
    };

    App.prototype.tweenTitleView = function() {
      return Tween.get(this.TitleView).to({
        y: -320
      }, 500).call(this.addGameView);
    };

    App.prototype.addGameView = function() {
      var _this = this;
      this.stage.removeChild(this.TitleView);
      this.TitleView = null;
      player_1.x = 2;
      player_1.y = 160 - 37.5;
      player_2.x = 480 - 25;
      player_2.y = 160 - 37.5;
      ball.x = 240 - 15;
      ball.y = 160 - 15;
      this.player_1_score = new Text('0', 'bold 20px Arial', '#A3FF24');
      this.player_1_score.x = 211;
      this.player_1_score.y = 20;
      this.player_2_score = new Text('0', 'bold 20px Arial', '#A3FF24');
      this.player_2_score.x = 262;
      this.player_2_score.y = 20;
      this.stage.addChild(this.player_1_score, this.player_2_score, player_1, player_2, ball);
      ball.onPress = function() {
        return socket.emit("bg_press");
      };
      return socket.on("game_started", function() {
        return _this.startGame();
      });
    };

    App.prototype.startGame = function(e) {
      var _this = this;
      socket.on("ballmove", function(x, y) {
        ball.x = x;
        return ball.y = y;
      });
      document.addEventListener('touchstart', function(e) {
        var index, touch, _i, _len, _ref, _results;
        index = 0;
        _ref = e.touches;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          touch = _ref[_i];
          if (touch.pageX < $('#PongStage').width() / 2) {
            _this.movePaddle_1(touch);
          }
          if (touch.pageX > $('#PongStage').width() / 2) {
            _this.movePaddle_2(touch);
          }
          _results.push(index++);
        }
        return _results;
      });
      return document.addEventListener('touchmove', function(e) {
        var index, touch, _i, _len, _ref, _results;
        index = 0;
        _ref = e.touches;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          touch = _ref[_i];
          if (touch.pageX < $('#PongStage').width() / 2) {
            _this.movePaddle_1(touch);
          }
          if (touch.pageX > $('#PongStage').width() / 2) {
            _this.movePaddle_2(touch);
          }
          _results.push(index++);
        }
        return _results;
      });
    };

    App.prototype.movePaddle_1 = function(touch) {
      var _this = this;
      socket.emit("paddlemove_1", touch.pageY);
      return socket.on("move_player_1", function(pageY) {
        return player_1.y = pageY;
      });
    };

    App.prototype.movePaddle_2 = function(touch) {
      var _this = this;
      socket.emit("paddlemove_2", touch.pageY);
      return socket.on("move_player_2", function(pageY) {
        return player_2.y = pageY;
      });
    };

    App.prototype.playerOneScore = function() {
      var _this = this;
      this.player_1_score.text = parseInt(this.player_1_score.text + 1.0);
      socket.on("reset_game", function() {
        return ball.onPress = function() {
          return socket.emit("bg_press");
        };
      });
      ball.x = 240 - 15;
      ball.y = 160 - 15;
      if (this.player_1_score.text === 3) {
        win.x = 140;
        win.y = -90;
        this.stage.addChild(win);
        Tween.get(win).to({
          y: 115
        }, 300);
        return this.resetGame();
      }
    };

    App.prototype.playerTwoScore = function() {
      var _this = this;
      this.player_2_score.text = parseInt(this.player_2_score.text + 1.0);
      socket.on("reset_game", function() {
        return ball.onPress = function() {
          return socket.emit("bg_press");
        };
      });
      ball.x = 240 - 15;
      ball.y = 160 - 15;
      if (this.player_2_score.text === 3) {
        lose.x = 140;
        lose.y = -90;
        this.stage.addChild(lose);
        Tween.get(lose).to({
          y: 115
        }, 300);
        return this.resetGame();
      }
    };

    App.prototype.resetGame = function() {
      var _this = this;
      this.stage.removeChild(this.player_1_score, this.player_2_score);
      this.player_1_score = new Text('0', 'bold 20px Arial', '#A3FF24');
      this.player_1_score.x = 211;
      this.player_1_score.y = 20;
      this.player_2_score = new Text('0', 'bold 20px Arial', '#A3FF24');
      this.player_2_score.x = 262;
      this.player_2_score.y = 20;
      this.stage.addChild(this.player_1_score, this.player_2_score);
      win.onPress = function() {
        return socket.emit("remove_win");
      };
      socket.on("remove", function() {
        return Tween.get(win).to({
          y: -115
        }, 300);
      });
      lose.onPress = function() {
        return socket.emit("remove_win");
      };
      socket.on("remove", function() {
        return Tween.get(lose).to({
          y: -115
        }, 300);
      });
      return ball.onPress = function() {
        return socket.emit("bg_press");
      };
    };

    return App;

  })();

}).call(this);
