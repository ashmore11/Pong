// Generated by CoffeeScript 1.3.3
(function() {
  var app, ball, end_game, express, io, player_1, player_2, show_wait, start_game, update, update_interval_id, user_num, usernames, xSpeed, ySpeed,
    _this = this;

  express = require("express");

  app = express();

  io = require("socket.io").listen(8080);

  usernames = {};

  app.get("/", function(req, res) {
    return res.sendfile(__dirname + "/index.html");
  });

  ball = {
    x: 240 - 15,
    y: 160 - 15
  };

  player_1 = {
    x: null,
    y: null
  };

  player_2 = {
    x: null,
    y: null
  };

  xSpeed = 12;

  ySpeed = 12;

  update_interval_id = null;

  user_num = 0;

  io.sockets.on("connection", function(socket) {
    console.log('Connected, Backend');
    socket.on("adduser", function(username) {
      socket.username = username;
      usernames[username] = username;
      socket.emit("updatepong", "SERVER", "you have connected");
      io.sockets.emit("updateusers", usernames);
      return user_num++;
    });
    socket.on("paddlemove_1", function(pageY) {
      player_1.y = pageY;
      io.sockets.emit("move_player_1", player_1.y);
      if (user_num < 2) {
        return show_wait();
      } else {
        return start_game();
      }
    });
    return socket.on("paddlemove_2", function(pageY) {
      player_2.y = pageY;
      return io.sockets.emit("move_player_2", player_2.y);
    });
  });

  show_wait = function() {
    return console.log("Waiting for another player to join!");
  };

  start_game = function(socket) {
    update_interval_id = setInterval(update, 50);
    ball.x = ball.x + xSpeed;
    ball.y = ball.y + ySpeed;
    if (ball.y < 0) {
      ySpeed = -ySpeed;
    }
    if (ball.y + 30 > 320) {
      ySpeed = -ySpeed;
    }
    if (ball.x <= player_1.x + 22 && ball.x > player_1.x && ball.y >= player_1.y && ball.y < player_1.y + 75) {
      xSpeed *= -1;
    }
    if (ball.x + 30 > player_2.x && ball.x + 30 < player_2.x + 22 && ball.y >= player_2.y && ball.y < player_2.y + 75) {
      xSpeed *= -1;
    }
    return io.sockets.emit("ballmove", ball.x, ball.y);
  };

  end_game = function() {
    clearInterval(update_interval_id);
    return update_interval_id = null;
  };

  update = function() {};

}).call(this);
