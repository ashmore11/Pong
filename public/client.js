// Generated by CoffeeScript 1.7.1
(function() {
  var App,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = (function() {
    App.prototype.window = null;

    App.prototype.pong_stage = null;

    App.prototype.socket = null;

    App.prototype.canvas = null;

    App.prototype.stage = null;

    App.prototype.images = null;

    App.prototype.title_view = null;

    App.prototype.total_loaded = 0;

    function App() {
      this.player_two_score = __bind(this.player_two_score, this);
      this.player_one_score = __bind(this.player_one_score, this);
      this.hide_title_view = __bind(this.hide_title_view, this);
      this.handle_load_complete = __bind(this.handle_load_complete, this);
      this.handle_file_load = __bind(this.handle_file_load, this);
      this.window = $(window);
      this.pong_stage = $('#PongStage');
      this.window.on('touchmove', function(event) {
        return event.preventDefault();
      });
      this.window.on('resize', this.on_resize());
      this.cc = window.cc = new CoffeeCollider;
      this.handle_users();
      this.create_stage();
    }

    App.prototype.handle_users = function() {
      this.socket = io.connect('http://scott.local:3700');
      this.socket.on('connect', (function(_this) {
        return function() {
          _this.socket.emit('adduser', prompt("What's your name?"));
          _this.socket.on('updateusers', function(user) {
            var html;
            html = user + ' has joined the game!';
            return $('#userDiv').html(html).fadeIn(1000).delay(1000).fadeOut(1000, function() {
              return $(_this).html('');
            });
          });
          return _this.socket.on('user_disconnect', function(user) {
            var html;
            html = user + ' has disconnected...';
            $('#disconnectDiv').html(html).fadeIn(1000).delay(1000).fadeOut(1000, function() {
              return $(_this).html('');
            });
            return _this.reset_game();
          });
        };
      })(this));
      this.socket.on('user_num', (function(_this) {
        return function(user_num) {
          return _this.delay(2000, function() {
            if (user_num === 2) {
              return _this.hide_title_view();
            }
          });
        };
      })(this));
      this.socket.on('player_1_score', (function(_this) {
        return function() {
          return _this.player_one_score();
        };
      })(this));
      return this.socket.on('player_2_score', (function(_this) {
        return function() {
          return _this.player_two_score();
        };
      })(this));
    };

    App.prototype.create_stage = function() {
      var preloader;
      this.canvas = document.getElementById('PongStage');
      this.stage = new Stage(this.canvas);
      this.stage.canvas.width = this.window.width();
      this.stage.canvas.height = this.window.height();
      this.images = [
        {
          id: 'wait',
          src: 'images/waiting.gif'
        }, {
          id: 'player_1',
          src: 'images/paddle.png'
        }, {
          id: 'player_2',
          src: 'images/paddle2.png'
        }, {
          id: 'ball',
          src: 'images/ball.png'
        }, {
          id: 'player_1_win',
          src: 'images/player_1_win.png'
        }, {
          id: 'player_2_win',
          src: 'images/player_2_win.png'
        }
      ];
      preloader = new PreloadJS();
      preloader.onFileLoad = this.handle_file_load;
      preloader.loadManifest(this.images);
      Ticker.setFPS(60);
      return Ticker.addListener(this.stage);
    };

    App.prototype.handle_file_load = function(e) {
      var img;
      switch (e.type) {
        case PreloadJS.IMAGE:
          img = new Image();
          img.src = e.src;
          img.onload = this.handle_load_complete();
          window[e.id] = new Bitmap(img);
          return this.handle_load_complete();
      }
    };

    App.prototype.handle_load_complete = function() {
      this.total_loaded++;
      if (this.images.length === this.total_loaded) {
        return this.add_title_view();
      }
    };

    App.prototype.add_title_view = function() {
      wait.x = (this.window.width() / 2) - 142;
      wait.y = this.window.height() / 2;
      Tween.get(wait).to({
        y: (this.window.height() / 2) - 45
      }, 500);
      this.title_view = new Container();
      this.title_view.addChild(wait);
      return this.stage.addChild(this.title_view);
    };

    App.prototype.hide_title_view = function() {
      if (this.title_view !== null) {
        Tween.get(this.title_view).to({
          y: -((this.window.height() / 2) + 45)
        }, 500);
      }
      return this.delay(500, (function(_this) {
        return function() {
          return _this.add_game_view();
        };
      })(this));
    };

    App.prototype.add_game_view = function() {
      var h, oh, ow, scale, w;
      this.pong_stage.css({
        opacity: 0
      });
      this.stage.removeChild(this.title_view);
      this.title_view = null;
      w = this.window.width() / 5;
      h = this.window.height() / 5;
      ow = 145;
      oh = 1129;
      scale = Math.min(w / ow, h / oh);
      player_1.scaleX = scale;
      player_1.scaleY = scale;
      player_1.x = 0;
      player_1.y = this.window.height() / 2;
      player_1.regY = player_1.image.height / 2;
      player_2.scaleX = scale;
      player_2.scaleY = scale;
      player_2.x = this.window.width() - (player_2.image.width * scale);
      player_2.y = this.window.height() / 2;
      player_2.regY = player_2.image.height / 2;
      w = this.window.width() / 10;
      h = this.window.height() / 10;
      ow = 245;
      oh = 400;
      scale = Math.min(w / ow, h / oh);
      ball.scaleX = scale;
      ball.scaleY = scale;
      ball.x = this.window.width() / 2;
      ball.y = this.window.height() / 2;
      ball.regX = ball.image.width / 2;
      ball.regY = ball.image.height / 2;
      this.player_1_score = new Text('0', '20px Arial', '#FFF');
      this.player_1_score.x = (this.window.width() / 2) - 15;
      this.player_1_score.y = 20;
      this.player_1_score.textAlign = 'right';
      this.player_2_score = new Text('0', '20px Arial', '#FFF');
      this.player_2_score.x = (this.window.width() / 2) + 15;
      this.player_2_score.y = 20;
      this.player_2_score.textAlign = 'left';
      this.stage.addChild(this.player_1_score, this.player_2_score, player_1, player_2, ball);
      this.pong_stage.animate({
        opacity: 1
      }, 500);
      this.move_paddle_1();
      this.move_paddle_2();
      this.paddle_events();
      return this.trigger_game();
    };

    App.prototype.trigger_game = function() {
      ball.onPress = (function(_this) {
        return function() {
          return _this.socket.emit('ball_pressed');
        };
      })(this);
      return this.socket.on('game_started', (function(_this) {
        return function() {
          return _this.start_game();
        };
      })(this));
    };

    App.prototype.paddle_events = function() {
      return this.window.on('touchstart touchmove mousedown mousemove', (function(_this) {
        return function(event) {
          var page_x, page_y, percent;
          page_y = event.originalEvent.pageY;
          page_x = event.originalEvent.pageX;
          percent = (page_y / _this.window.height()) * 100;
          if (page_x < _this.pong_stage.width() / 2) {
            _this.socket.emit('move_1', percent);
          }
          if (page_x > _this.pong_stage.width() / 2) {
            return _this.socket.emit('move_2', percent);
          }
        };
      })(this));
    };

    App.prototype.start_game = function() {
      this.socket.on('ballmove', (function(_this) {
        return function(x, y) {
          ball.x = (x / 100) * _this.window.width();
          return ball.y = (y / 100) * _this.window.height();
        };
      })(this));
      Tween.get(ball, {
        loop: true
      }).to({
        rotation: 360
      }, 1000);
      return this.trigger_audio();
    };

    App.prototype.trigger_audio = function() {
      this.socket.on('paddle_hit', function() {
        Tween.removeTweens(ball);
        return Tween.get(ball, {
          loop: true
        }).to({
          rotation: 360
        }, 1000);
      });
      return this.socket.on('wall_hit', function() {
        Tween.removeTweens(ball);
        return Tween.get(ball, {
          loop: true
        }).to({
          rotation: -360
        }, 1000);
      });
    };

    App.prototype.move_paddle_1 = function() {
      return this.socket.on('paddle_1', (function(_this) {
        return function(percent) {
          var bottom, h, oh, ow, page_y, scale, top, w;
          w = _this.window.width() / 5;
          h = _this.window.height() / 5;
          ow = 145;
          oh = 1129;
          scale = Math.min(w / ow, h / oh);
          page_y = (percent / 100) * _this.window.height();
          player_1.y = page_y;
          bottom = _this.window.height() - ((player_1.image.height * scale) / 2);
          top = 0 + ((player_1.image.height * scale) / 2);
          if (player_1.y >= bottom) {
            player_1.y = bottom;
          }
          if (player_1.y <= top) {
            return player_1.y = top;
          }
        };
      })(this));
    };

    App.prototype.move_paddle_2 = function() {
      return this.socket.on('paddle_2', (function(_this) {
        return function(percent) {
          var bottom, h, oh, ow, page_y, scale, top, w;
          w = _this.window.width() / 5;
          h = _this.window.height() / 5;
          ow = 145;
          oh = 1129;
          scale = Math.min(w / ow, h / oh);
          page_y = (percent / 100) * _this.window.height();
          player_2.y = page_y;
          bottom = _this.window.height() - ((player_2.image.height * scale) / 2);
          top = 0 + ((player_2.image.height * scale) / 2);
          if (player_2.y >= bottom) {
            player_2.y = bottom;
          }
          if (player_2.y <= top) {
            return player_2.y = top;
          }
        };
      })(this));
    };

    App.prototype.player_one_score = function() {
      Tween.removeTweens(ball);
      Tween.get(ball).to({
        rotation: 0
      }, 1);
      this.player_1_score.text = parseInt(this.player_1_score.text + 1.0);
      ball.x = this.window.width() / 2;
      ball.y = this.window.height() / 2;
      ball.regX = ball.image.width / 2;
      ball.regY = ball.image.height / 2;
      if (this.player_1_score.text === 3) {
        player_1_win.x = (this.window.width() / 2) - 100;
        player_1_win.y = this.window.height() / 2;
        this.stage.addChild(player_1_win);
        Tween.get(player_1_win).to({
          y: (this.window.height() / 2) - 45
        }, 500);
        return this.reset_game();
      }
    };

    App.prototype.player_two_score = function() {
      Tween.removeTweens(ball);
      Tween.get(ball).to({
        rotation: 0
      }, 1);
      this.player_2_score.text = parseInt(this.player_2_score.text + 1.0);
      ball.x = this.window.width() / 2;
      ball.y = this.window.height() / 2;
      ball.regX = ball.image.width / 2;
      ball.regY = ball.image.height / 2;
      if (this.player_2_score.text === 3) {
        player_2_win.x = (this.window.width() / 2) - 100;
        player_2_win.y = this.window.height() / 2;
        this.stage.addChild(player_2_win);
        Tween.get(player_2_win).to({
          y: (this.window.height() / 2) - 45
        }, 500);
        return this.reset_game();
      }
    };

    App.prototype.reset_game = function() {
      this.stage.removeChild(this.player_1_score, this.player_2_score);
      this.player_1_score = new Text('0', '20px Arial', '#FFF');
      this.player_1_score.x = (this.window.width() / 2) - 15;
      this.player_1_score.y = 20;
      this.player_1_score.textAlign = 'right';
      this.player_2_score = new Text('0', '20px Arial', '#FFF');
      this.player_2_score.x = (this.window.width() / 2) + 15;
      this.player_2_score.y = 20;
      this.player_2_score.textAlign = 'left';
      this.stage.addChild(this.player_1_score, this.player_2_score);
      player_1_win.onPress = (function(_this) {
        return function() {
          return _this.socket.emit('remove_win');
        };
      })(this);
      this.socket.on('remove', function() {
        return Tween.get(player_1_win).to({
          y: -115
        }, 300);
      });
      player_2_win.onPress = (function(_this) {
        return function() {
          return _this.socket.emit('remove_win');
        };
      })(this);
      this.socket.on('remove', function() {
        return Tween.get(player_2_win).to({
          y: -115
        }, 300);
      });
      return ball.onPress = (function(_this) {
        return function() {
          return _this.socket.emit('ball_pressed');
        };
      })(this);
    };

    App.prototype.delay = function(time, fn, args) {
      return setTimeout(fn, time, args);
    };

    App.prototype.on_resize = function() {
      return $('body').animate({
        scrollTop: 0
      }, 1000);
    };

    return App;

  })();

  $(function() {
    var app;
    return app = new App;
  });

}).call(this);
