// Generated by CoffeeScript 1.7.1
(function() {
  var app, ball, express, increase_speed, io, player_1, player_2, port, reset, start_game, timer, update, user_num, users, x_speed, y_speed;

  express = require('express');

  app = express();

  port = 3700;

  app.use(express["static"](__dirname + '/'));

  io = require('socket.io').listen(app.listen(port));

  io.set('log level', 0);

  app.get('/', function(req, res) {
    return res.sendfile(__dirname + '/index.html');
  });

  ball = {
    x: 50,
    y: 50
  };

  player_1 = {
    x: 1,
    y: 50
  };

  player_2 = {
    x: 99,
    y: 50
  };

  x_speed = 1;

  y_speed = 1.2;

  user_num = 0;

  timer = null;

  users = [];

  io.sockets.on('connection', (function(_this) {
    return function(socket) {
      socket.on('adduser', function(user) {
        user_num += 1;
        io.sockets.emit('user_num', user_num);
        if (user_num > 2) {
          io.sockets.socket(socket.id).emit('max_users', user);
        }
        return socket.set('username', user, function() {
          users.push(user);
          return io.sockets.emit('updateusers', user);
        });
      });
      socket.on('disconnect', function() {
        user_num -= 1;
        io.sockets.emit('user_num', user_num);
        return socket.get('username', function(err, user) {
          io.sockets.emit('user_disconnect', user);
          return delete users[user];
        });
      });
      socket.on('ball_pressed', function() {
        start_game();
        return io.sockets.emit('game_started');
      });
      socket.on('remove_win', function() {
        return io.sockets.emit('remove');
      });
      socket.on('move_1', function(percent) {
        player_1.y = percent;
        return io.sockets.emit('paddle_1', percent);
      });
      socket.on('move_2', function(percent) {
        player_2.y = percent;
        return io.sockets.emit('paddle_2', percent);
      });
      socket.on('single_player_mode', function(y) {
        return player_2.y = y;
      });
      return socket.on('players_ready', function() {
        return io.sockets.emit('start_game');
      });
    };
  })(this));

  start_game = function() {
    clearInterval(timer);
    return timer = setInterval(update, 15);
  };

  reset = function() {
    ball = {
      x: 50,
      y: 50
    };
    player_1 = {
      x: 1,
      y: 50
    };
    player_2 = {
      x: 99,
      y: 50
    };
    io.sockets.emit('reset_game');
    clearInterval(timer);
    return timer = null;
  };

  increase_speed = function(axis) {
    var speed;
    speed = Math.floor((axis * -1.02) * 100) / 100;
    return speed;
  };

  update = function() {
    ball.x = ball.x + x_speed;
    ball.y = ball.y + y_speed;
    io.sockets.emit('ballmove', ball.x, ball.y);
    if (ball.y <= 5) {
      y_speed = increase_speed(y_speed);
      io.sockets.emit('wall_hit');
    }
    if (ball.y >= 95) {
      y_speed = increase_speed(y_speed);
      io.sockets.emit('wall_hit');
    }
    if (ball.x > player_1.x && ball.x < player_1.x + 4 && ball.y > player_1.y - 10 && ball.y < player_1.y + 10) {
      x_speed = increase_speed(x_speed);
      io.sockets.emit('paddle_hit');
    }
    if (ball.x < player_2.x && ball.x > player_2.x - 4 && ball.y > player_2.y - 10 && ball.y < player_2.y + 10) {
      x_speed = increase_speed(x_speed);
      io.sockets.emit('paddle_hit');
    }
    if (ball.x > 99) {
      if (x_speed < 0) {
        x_speed = 1;
      } else {
        x_speed = -1;
      }
      if (y_speed < 0) {
        y_speed = 1.2;
      } else {
        y_speed = -1.2;
      }
      io.sockets.emit('player_1_score');
      reset();
    }
    if (ball.x < 1) {
      if (x_speed < 0) {
        x_speed = 1;
      } else {
        x_speed = -1;
      }
      if (y_speed < 0) {
        y_speed = 1.2;
      } else {
        y_speed = -1.2;
      }
      io.sockets.emit('player_2_score');
      return reset();
    }
  };

}).call(this);
